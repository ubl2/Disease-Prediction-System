{"version":3,"file":"mat-progress-buttons.js","sources":["../../../projects/mat-progress-buttons/src/lib/mat-progress-buttons.injection-token.ts","../../../projects/mat-progress-buttons/src/lib/component/spinner-button/spinner-button.component.ts","../../../projects/mat-progress-buttons/src/lib/component/bar-button/bar-button.component.ts","../../../projects/mat-progress-buttons/src/lib/mat-progress-buttons.module.ts","../../../projects/mat-progress-buttons/src/mat-progress-buttons.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\nexport interface Config extends MatProgressButtonOptions {\n  id?: string;\n}\n\nexport type GlobalConfig = Config[];\n\nexport const GLOBAL_CONFIG = new InjectionToken<GlobalConfig>('Global Config');\n","import {\n  Component,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n} from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\nimport {\n  GLOBAL_CONFIG,\n  GlobalConfig,\n} from '../../mat-progress-buttons.injection-token';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-spinner-button',\n  templateUrl: './spinner-button.component.html',\n  styleUrls: ['./spinner-button.component.scss'],\n})\nexport class MatSpinnerButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() buttonId: string;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  @HostListener('click', ['$event'])\n  public handleClick(event: MouseEvent): void {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  constructor(@Inject(GLOBAL_CONFIG) private config: GlobalConfig) {}\n\n  get configExists(): boolean {\n    return !!this.buttonId && !!this.config;\n  }\n\n  get globalConfig(): MatProgressButtonOptions {\n    return this.configExists\n      ? this.config.find((item) => item.id === this.buttonId)\n      : this.options;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n    this.options = { ...this.globalConfig, ...this.options };\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n} from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\nimport { GLOBAL_CONFIG, GlobalConfig } from '../../mat-progress-buttons.injection-token';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-bar-button',\n  templateUrl: './bar-button.component.html',\n  styleUrls: ['./bar-button.component.scss'],\n})\nexport class MatBarButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() buttonId: string;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  @HostListener('click', ['$event'])\n  handleClick(event: MouseEvent): void {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  constructor(@Inject(GLOBAL_CONFIG) private config: GlobalConfig) {}\n\n  get configExists(): boolean {\n    return !!this.buttonId && !!this.config;\n  }\n\n  get globalConfig(): MatProgressButtonOptions {\n    return this.configExists\n      ? this.config.find((item) => item.id === this.buttonId)\n      : this.options;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.options = { ...this.globalConfig, ...this.options };\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nimport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { GLOBAL_CONFIG, GlobalConfig } from './mat-progress-buttons.injection-token';\n\n// Export module's public API\nexport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nexport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nexport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatIconModule,\n  ],\n  exports: [MatSpinnerButtonComponent, MatBarButtonComponent],\n  declarations: [MatSpinnerButtonComponent, MatBarButtonComponent],\n})\nexport class MatProgressButtonsModule {\n  static forRoot(\n    config?: GlobalConfig\n  ): ModuleWithProviders<MatProgressButtonsModule> {\n    return {\n      ngModule: MatProgressButtonsModule,\n      providers: [{ provide: GLOBAL_CONFIG, useValue: config }],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {GLOBAL_CONFIG as ɵb,GlobalConfig as ɵa} from './lib/mat-progress-buttons.injection-token';"],"names":[],"mappings":"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"}